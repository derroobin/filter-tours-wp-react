export interface TourenType {
  id: number
  date: string
  date_gmt: string
  guid: GUID
  modified: string
  modified_gmt: string
  slug: string
  status: string
  type: string
  link: string
  title: GUID
  content: Content
  excerpt: Content
  author: number
  featured_media: number
  parent: number
  menu_order: number
  comment_status: string
  ping_status: string
  template: string
  meta: { [key: string]: Meta }
  acf: Acf
  _links: Links
}

export interface Links {
  self: About[]
  collection: About[]
  about: About[]
  author: Author[]
  replies: Author[]
  'version-history': VersionHistory[]
  'predecessor-version': PredecessorVersion[]
  up: Author[]
  'wp:attachment': About[]
  curies: Cury[]
  'wp:featuredmedia'?: Author[]
}

export interface About {
  href: string
}

export interface Author {
  embeddable: boolean
  href: string
}

export interface Cury {
  name: string
  href: string
  templated: boolean
}

export interface PredecessorVersion {
  id: number
  href: string
}

export interface VersionHistory {
  count: number
  href: string
}

export interface Acf {
  land?: string
  region?: string
  gipfelhoehe?: string
  hoehenmeter?: string
  dauer?: string
  schwierigkeit?: string
  i_land?: string
  i_region?: string
  i_gipfelhoehe?: string
  i_hoehenmeter?: string
  i_dauer?: string
  i_schwierigkeit?: string
  bild1?: string | number
  bild2?: string | number
  bild3?: string | number
  bild4?: string | number
  bild5?: string | number
  bild6?: string | number
  bild7?: string | number
  bild8?: string | number
  bild9?: string | number
  bild10?: '' | number
}

export interface Content {
  rendered: string
  protected: boolean
}

export interface GUID {
  rendered: string
}

export enum Meta {
  Disabled = 'disabled',
  Empty = '',
  Enabled = 'enabled',
  NoSidebar = 'no-sidebar',
  PageBuilder = 'page-builder',
  Default = 'default'
}

// Generated by https://quicktype.io

export interface MediaType {
  id: number
  slug: string
  link: string
  title: Caption
  acf: Acf
  media_details: MediaDetails
}

export interface Links {
  self: About[]
  collection: About[]
  about: About[]
  author: Author[]
  replies: Author[]
}

export interface About {
  href: string
}

export interface Author {
  embeddable: boolean
  href: string
}

export interface Caption {
  rendered: string
}

type sizeTypes = 'full' | 'large' | 'medium_large'

export interface MediaDetails {
  width: number
  height: number
  file: string
  filesize: number
  sizes: Record<sizeTypes, Size>
  image_meta: ImageMeta
  original_image: string
}

export interface ImageMeta {
  aperture: string
  credit: string
  camera: string
  caption: string
  created_timestamp: string
  copyright: string
  focal_length: string
  iso: string
  shutter_speed: string
  title: string
  orientation: string
  keywords: any[]
}

export interface Size {
  file: string
  width: number
  height: number
  filesize?: number
  mime_type: MIMEType
  source_url: string
  uncropped?: boolean
}

export enum MIMEType {
  ImageJPEG = 'image/jpeg'
}
