import { useQuery, QueryFunctionContext } from '@tanstack/react-query'
import { useEffect, useState } from 'react'
import { TourenType } from './datatype'
// Generated by https://quicktype.io

const getPages = async ({
  queryKey
}: QueryFunctionContext<[string, QueryParameter]>) => {
  const [_, { slug }] = queryKey

  const url = new URL(
    `${import.meta.env.VITE_URL}/wp-json/wp/v2/pages?parent=12472&per_page=100`
  )
  if (slug) {
    url.searchParams.set('slug', slug)
  }

  const req = await fetch(url)

  return req.json() as unknown as TourenType[]
}

interface FilterOuterProps {
  slug: QueryParameter['slug']
  setSlug: React.Dispatch<React.SetStateAction<QueryParameter['slug']>>
}

interface FilterProps {
  slugs: string[]
}

const Filter = ({ slug, setSlug }: FilterOuterProps) => {
  return ({ slugs }: FilterProps) => {
    return (
      <select
        value={slug || ''}
        onChange={(x) => setSlug(x.target.value || undefined)}>
        <option value={''}>Slug</option>
        {slugs.map((x) => (
          <option key={x} value={x}>
            {x}
          </option>
        ))}
      </select>
    )
  }
}

interface QueryParameter {
  slug?: string
}

const useTouren = (parameter: QueryParameter) => {
  return useQuery(['Touren', parameter], getPages)
}

const useFilter = () => {
  const url = new URL(window.location.href)
  const [slug, setSlug] = useState<QueryParameter['slug']>(
    url.searchParams.get('slug') || undefined
  )
  const parameter: QueryParameter = {
    slug
  }

  useEffect(() => {
    const x = { slug }

    const url = new URL(window.location.href)

    Object.entries(x).forEach(([k, v]) => {
      if (v) {
        url.searchParams.set(k, v)
      }
    })

    history.pushState({}, '', url)
  }, [slug])
  return { parameter, Filter: Filter({ slug, setSlug }) }
}

const Touren = () => {
  console.log('URL', import.meta.env.VITE_URL)
  const { parameter, Filter } = useFilter()
  const all = useTouren({})
  const data = useTouren(parameter)
  const [filter, setFilter] = useState<string[]>([])
  useEffect(() => {
    if (all.data) {
      setFilter(all.data.map((x) => x.slug))
    }
  }, [all.data])

  if (data.isLoading || data.isError) return <div>loading..</div>

  return (
    <div>
      <Filter slugs={filter} />
      {data.data.map((x) => (
        <Tour key={x.slug} data={x} />
      ))}
    </div>
  )
}

interface TourProps {
  data: TourenType
}
const Tour = ({ data }: TourProps) => {
  console.log(data._links['wp:attachment'])
  return (
    <div>
      <a href={data.link} target="_blank" rel="noopener noreferrer">
        {data.title.rendered} - {data.slug}
      </a>
    </div>
  )
}

export default Touren
